class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
       int n = piles.size();

        if(n == 1)
            return ceil( (double) piles[0] / h);
        

        int l = 1, r = *max_element(piles.begin(),piles.end());
        int k = r;
        long long int hours; //here, k is the number of bananas koko eat per hour

        while(l <= r)
        {
            int mid = l + (r - l)/2;

            //with mid as the no. of bananas koko eat per hour, calculate the amount of hours needed to eat all bananas
            hours = 0;
            for(auto&  pile: piles)
                hours += ceil( (double) pile/mid);

            if(hours <= h)
            {
                //there is scope to get a better value for k
                k = min(k, mid);
                r = mid - 1;
            }
            else  //increase the eating speed
                l = mid + 1;
        }

        return k;
    }
};
